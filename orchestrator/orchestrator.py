from clan.factories.abstract_factory import AgentFactory
from clan.agents.file_agent import FileAgent
from clan.agents.task_planner import TaskPlannerAgent
from clan.agents.summary_agent import SummaryAgent
import os
import time

class Orchestrator:
    def __init__(self, factory: AgentFactory, file_agent=None, task_planner=None):
        self.developer_agent = factory.create_developer_agent()
        self.file_agent = file_agent or factory.create_file_agent()
        self.task_planner = task_planner or factory.create_task_planner()
        self.summary_agent = factory.create_summary_agent()
        self.project_summary = ""

    def run_workflow(self, task: str):
        print(f"[Orchestrator] Starting workflow for task: {task}")
        print("[Orchestrator] Designing project structure...")
        file_list = self.file_agent.act(task)
        print(f"[Orchestrator] Project structure:\n{self.file_agent.project_state.get_project_view()}")
        if not file_list:
            print("[Orchestrator] No files suggested by FileAgent.")
            return
        print("[Orchestrator] Planning step-by-step agentic plan...")
        plan = self.task_planner.act(task, self.file_agent.project_state)
        if not plan:
            print("[Orchestrator] No plan generated by TaskPlannerAgent.")
            return
        agent_registry = {
            "DeveloperAgent": self.developer_agent,
            "code_generator": self.developer_agent,  # backward compatibility
            # Add other agents here as needed (e.g., ReviewerAgent, TesterAgent, DocAgent)
        }
        for step in plan:
            agent_name = step.get("agent")
            action = step.get("action")
            targets = step.get("targets", [])
            description = step.get("description", "")
            print(f"[Orchestrator] Step: {action} on {targets} using {agent_name} - {description}")
            agent = agent_registry.get(agent_name)
            if not agent:
                print(f"[Orchestrator] Agent {agent_name} not implemented. Skipping step.")
                continue
            # For DeveloperAgent, pass project_view, requirement/description, and context
            if agent_name == "DeveloperAgent":
                project_view = self.file_agent.project_state.get_project_view()
                file_changes = agent.act(project_view, description, self.project_summary)
                for change in file_changes:
                    file_path = change.get("file")
                    content = change.get("content")
                    desc = change.get("description")
                    # Skip if file_path is a directory or empty
                    if not file_path or file_path.endswith('/') or file_path.strip() == '':
                        continue
                    self.file_agent.project_state.write_file(file_path, content)
                    print(f"[Orchestrator] Updated {file_path}: {desc}")
                # Update project summary with all changes
                summary_input = f"Files updated: {[c.get('file') for c in file_changes]}\nDescriptions: {[c.get('description') for c in file_changes]}"
                self.project_summary = self.summary_agent.act(self.project_summary, summary_input)
            # Add logic for other agent types as needed
        root_dir_name = self._extract_root_dir(file_list)
        if not root_dir_name:
            root_dir_name = f"project_{int(time.time())}"
        output_path = os.path.join("projects", root_dir_name)
        os.makedirs(output_path, exist_ok=True)
        self.file_agent.project_state.commit_to_disk(output_path)
        print(f"\n[Orchestrator] Project saved to: {output_path}\n")

    def _extract_root_dir(self, file_list):
        # Find the first path segment of the first file/folder that is not a file in the root
        for path in file_list:
            parts = path.split('/')
            if len(parts) > 1:
                return parts[0]
        # If all files are in the root, return None
        return None 